// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ----------- //
// pio_uart_RX //
// ----------- //

#define pio_uart_RX_wrap_target 0
#define pio_uart_RX_wrap 15

#define pio_uart_RX_offset_input 0u

static const uint16_t pio_uart_RX_program_instructions[] = {
            //     .wrap_target
    0x00c0, //  0: jmp    pin, 0                     
    0xa642, //  1: nop                           [6] 
    0x4501, //  2: in     pins, 1                [5] 
    0x4501, //  3: in     pins, 1                [5] 
    0x4501, //  4: in     pins, 1                [5] 
    0x4501, //  5: in     pins, 1                [5] 
    0x4501, //  6: in     pins, 1                [5] 
    0x4501, //  7: in     pins, 1                [5] 
    0x4501, //  8: in     pins, 1                [5] 
    0x4501, //  9: in     pins, 1                [5] 
    0x4078, // 10: in     null, 24                   
    0x00ce, // 11: jmp    pin, 14                    
    0x4060, // 12: in     null, 32                   
    0x0000, // 13: jmp    0                          
    0x8020, // 14: push   block                      
    0x0000, // 15: jmp    0                          
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program pio_uart_RX_program = {
    .instructions = pio_uart_RX_program_instructions,
    .length = 16,
    .origin = -1,
};

static inline pio_sm_config pio_uart_RX_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + pio_uart_RX_wrap_target, offset + pio_uart_RX_wrap);
    return c;
}

void pio_uart_RX_program_init(PIO pio, uint sm, uint offset, uint pin_in, float div){
pio_sm_config c =pio_uart_RX_program_get_default_config(offset);
//allpw pio to control pin
pio_gpio_init(pio, pin_in);
//set jump pin
sm_config_set_jmp_pin(&c,pin_in);
//con pin to sset inst
sm_config_set_in_pins(&c, pin_in);
//set pins directions
pio_sm_set_consecutive_pindirs(pio,sm,pin_in,1,false);
sm_config_set_clkdiv(&c,div);
//configure isr
sm_config_set_in_shift(
        &c,
        true, // Shift-to-right = false (i.e. shift to left)
        false,  // Autopush enabled
        8      // Autopush threshold = 8
    );
pio_sm_init(pio,sm,offset,&c);
}

#endif

