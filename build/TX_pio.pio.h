// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ----------- //
// pio_uart_TX //
// ----------- //

#define pio_uart_TX_wrap_target 0
#define pio_uart_TX_wrap 12

#define pio_uart_TX_offset_output 1u

static const uint16_t pio_uart_TX_program_instructions[] = {
            //     .wrap_target
    0xe001, //  0: set    pins, 1                    
    0x80a0, //  1: pull   block                      
    0xe000, //  2: set    pins, 0                    
    0x6001, //  3: out    pins, 1                    
    0x6001, //  4: out    pins, 1                    
    0x6001, //  5: out    pins, 1                    
    0x6001, //  6: out    pins, 1                    
    0x6001, //  7: out    pins, 1                    
    0x6001, //  8: out    pins, 1                    
    0x6001, //  9: out    pins, 1                    
    0x6001, // 10: out    pins, 1                    
    0xe001, // 11: set    pins, 1                    
    0x0001, // 12: jmp    1                          
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program pio_uart_TX_program = {
    .instructions = pio_uart_TX_program_instructions,
    .length = 13,
    .origin = -1,
};

static inline pio_sm_config pio_uart_TX_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + pio_uart_TX_wrap_target, offset + pio_uart_TX_wrap);
    return c;
}

void pio_uart_TX_program_init(PIO pio, uint sm, uint offset, uint pin_out, float div){
pio_sm_config c =pio_uart_TX_program_get_default_config(offset);
//allpw pio to control pin
pio_gpio_init(pio, pin_out);
//connect pin to set inst
sm_config_set_set_pins(&c, pin_out, 1);
//connect pin to out inst
sm_config_set_out_pins(&c, pin_out, 1);
//set pins directions
pio_sm_set_consecutive_pindirs(pio,sm,pin_out,1,true);
sm_config_set_clkdiv(&c,div);
//configure isr
sm_config_set_out_shift(
        &c,
        true, // Shift-to-right = false (i.e. shift to left)
        false,  // Autopush enabled
        8      // Autopush threshold = 8
    );
pio_sm_init(pio,sm,offset,&c);
}

#endif

